import requests
import os
from dotenv import load_dotenv
load_dotenv()

token = os.getenv('API_TOKEN')
API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-cnn"
headers = {"Authorization": f"Bearer {token}"}

def query(payload):
	response = requests.post(API_URL, headers=headers, json=payload)
	return response.json()



sentence = '''Basic Understanding:What is it? Generative AI refers to a subfield of artificial intelligence (AI) that focuses on creating new content, such as text, images, code, music, or designs, rather than simply analyzing or interpreting existing data. It does this by learning the underlying patterns and relationships within large datasets of human-created content and then using those patterns to generate new, original outputs.Enhanced creativity and innovation: Generative AI can spark new ideas and help people explore creative possibilities they may not have considered otherwise. It can also automate repetitive tasks, allowing creators to focus on more strategic aspects of their work.Personalization and customization: Generative AI can personalize content to individual preferences or tailor it to specific needs. This can be valuable in applications like marketing, education, and entertainment.Content generation at scale: Generative AI can create large amounts of content quickly and efficiently, which is useful for tasks like generating product descriptions, writing news articles, or composing music.Exploration of possibilities: Generative AI can be used to explore potential designs, products, or solutions in a virtual environment before committing resources to real-world development.Text generation: Writing creative content like poems, scripts, or code; generating summaries; translating languages; personalizing marketing copy.Image generation: Creating realistic images, editing existing images, designing new products or environments.Music generation: Composing music in different styles, generating sound effects, personalizing music recommendations.Data augmentation: Creating synthetic data to train machine learning models; enriching existing datasets with diverse examples.Technical Aspects:Generative models: These are the core algorithms that power Generative AI. Common types include:Variational Autoencoders (VAEs): Learn a compressed representation of data and then decode it to generate new samples.Generative Adversarial Networks (GANs): Train two models against each other: a generator that creates new content, and a discriminator that tries to distinguish real content from generated content.Transformer-based models: Use attention mechanisms to learn long-range dependencies in data, which can be helpful for generating complex content like text or code.Training data: Generative models require large amounts of high-quality data to learn from. The quality and diversity of the data significantly impact the quality and realism of the generated outputs.Evaluation metrics: Assessing the quality of generated content can be challenging, but common metrics include:Inception Score: Measures how diverse and realistic generated images are.BLEU score: Measures how well generated text matches human-written text.Fr√©chet Inception Distance (FID): Measures the similarity between the distributions of real and generated data.Ethical Considerations. Bias: Generative AI models can inherit biases from the data they are trained on. It's crucial to carefully select and curate training data to minimize bias and ensure fair and ethical outcomes.Misinformation and deepfakes: Generative AI can be misused to create realistic but fake content, such as deepfakes, which can have negative consequences. It's important to develop safeguards to prevent malicious use and promote responsible AI development.Copyright and ownership: Questions arise regarding the ownership of content generated by AI models, especially when combined with human creativity. Addressing these issues through clear legal frameworks is essential.'''

# sentence = clean_text(sentence)	
payload = {
    "inputs":sentence ,
    "parameters":{
        "max_length": 1000,
        "min_length": 500
    }
    }

print(query(payload)[0].get('summary_text'))